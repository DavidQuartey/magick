// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "magick_types.h"
#include <Rcpp.h>

using namespace Rcpp;

// magick_coder_info
Rcpp::List magick_coder_info(Rcpp::String format);
RcppExport SEXP magick_magick_coder_info(SEXP formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::String >::type format(formatSEXP);
    __result = Rcpp::wrap(magick_coder_info(format));
    return __result;
END_RCPP
}
// magick_frame_read
XPtrFrame magick_frame_read(Rcpp::RawVector x);
RcppExport SEXP magick_magick_frame_read(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type x(xSEXP);
    __result = Rcpp::wrap(magick_frame_read(x));
    return __result;
END_RCPP
}
// magick_frame_write
Rcpp::RawVector magick_frame_write(XPtrFrame frame, Rcpp::String format);
RcppExport SEXP magick_magick_frame_write(SEXP frameSEXP, SEXP formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrFrame >::type frame(frameSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type format(formatSEXP);
    __result = Rcpp::wrap(magick_frame_write(frame, format));
    return __result;
END_RCPP
}
// magick_frame_info
Rcpp::List magick_frame_info(XPtrFrame frame);
RcppExport SEXP magick_magick_frame_info(SEXP frameSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrFrame >::type frame(frameSEXP);
    __result = Rcpp::wrap(magick_frame_info(frame));
    return __result;
END_RCPP
}
// magick_image_length
int magick_image_length(XPtrImage image);
RcppExport SEXP magick_magick_image_length(SEXP imageSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrImage >::type image(imageSEXP);
    __result = Rcpp::wrap(magick_image_length(image));
    return __result;
END_RCPP
}
// copy
XPtrImage copy(XPtrImage image);
RcppExport SEXP magick_copy(SEXP imageSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrImage >::type image(imageSEXP);
    __result = Rcpp::wrap(copy(image));
    return __result;
END_RCPP
}
// magick_image_rev
XPtrImage magick_image_rev(XPtrImage input);
RcppExport SEXP magick_magick_image_rev(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    __result = Rcpp::wrap(magick_image_rev(input));
    return __result;
END_RCPP
}
// magick_image_join
XPtrImage magick_image_join(Rcpp::List input);
RcppExport SEXP magick_magick_image_join(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::List >::type input(inputSEXP);
    __result = Rcpp::wrap(magick_image_join(input));
    return __result;
END_RCPP
}
// magick_image_subset
XPtrImage magick_image_subset(XPtrImage image, Rcpp::IntegerVector index);
RcppExport SEXP magick_magick_image_subset(SEXP imageSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrImage >::type image(imageSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type index(indexSEXP);
    __result = Rcpp::wrap(magick_image_subset(image, index));
    return __result;
END_RCPP
}
// magick_image_noise
XPtrImage magick_image_noise(XPtrImage input, int noisetype);
RcppExport SEXP magick_magick_image_noise(SEXP inputSEXP, SEXP noisetypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< int >::type noisetype(noisetypeSEXP);
    __result = Rcpp::wrap(magick_image_noise(input, noisetype));
    return __result;
END_RCPP
}
// magick_image_blur
XPtrImage magick_image_blur(XPtrImage input, const double radius, const double sigma);
RcppExport SEXP magick_magick_image_blur(SEXP inputSEXP, SEXP radiusSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< const double >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    __result = Rcpp::wrap(magick_image_blur(input, radius, sigma));
    return __result;
END_RCPP
}
// magick_image_charcoal
XPtrImage magick_image_charcoal(XPtrImage input, const double radius, const double sigma);
RcppExport SEXP magick_magick_image_charcoal(SEXP inputSEXP, SEXP radiusSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< const double >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    __result = Rcpp::wrap(magick_image_charcoal(input, radius, sigma));
    return __result;
END_RCPP
}
// magick_image_chop
XPtrImage magick_image_chop(XPtrImage input, Rcpp::String geometry);
RcppExport SEXP magick_magick_image_chop(SEXP inputSEXP, SEXP geometrySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type geometry(geometrySEXP);
    __result = Rcpp::wrap(magick_image_chop(input, geometry));
    return __result;
END_RCPP
}
// magick_image_colorize
XPtrImage magick_image_colorize(XPtrImage input, const size_t opacity, Rcpp::String color);
RcppExport SEXP magick_magick_image_colorize(SEXP inputSEXP, SEXP opacitySEXP, SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< const size_t >::type opacity(opacitySEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type color(colorSEXP);
    __result = Rcpp::wrap(magick_image_colorize(input, opacity, color));
    return __result;
END_RCPP
}
// magick_image_delay
XPtrImage magick_image_delay(XPtrImage input, int delay);
RcppExport SEXP magick_magick_image_delay(SEXP inputSEXP, SEXP delaySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< int >::type delay(delaySEXP);
    __result = Rcpp::wrap(magick_image_delay(input, delay));
    return __result;
END_RCPP
}
// magick_image_edge
XPtrImage magick_image_edge(XPtrImage input, size_t radius);
RcppExport SEXP magick_magick_image_edge(SEXP inputSEXP, SEXP radiusSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< size_t >::type radius(radiusSEXP);
    __result = Rcpp::wrap(magick_image_edge(input, radius));
    return __result;
END_RCPP
}
// magick_image_emboss
XPtrImage magick_image_emboss(XPtrImage input, const double radius, const double sigma);
RcppExport SEXP magick_magick_image_emboss(SEXP inputSEXP, SEXP radiusSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< const double >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    __result = Rcpp::wrap(magick_image_emboss(input, radius, sigma));
    return __result;
END_RCPP
}
// magick_image_enhance
XPtrImage magick_image_enhance(XPtrImage input);
RcppExport SEXP magick_magick_image_enhance(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    __result = Rcpp::wrap(magick_image_enhance(input));
    return __result;
END_RCPP
}
// magick_image_equalize
XPtrImage magick_image_equalize(XPtrImage input);
RcppExport SEXP magick_magick_image_equalize(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    __result = Rcpp::wrap(magick_image_equalize(input));
    return __result;
END_RCPP
}
// magick_image_flip
XPtrImage magick_image_flip(XPtrImage input);
RcppExport SEXP magick_magick_image_flip(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    __result = Rcpp::wrap(magick_image_flip(input));
    return __result;
END_RCPP
}
// magick_image_flop
XPtrImage magick_image_flop(XPtrImage input);
RcppExport SEXP magick_magick_image_flop(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    __result = Rcpp::wrap(magick_image_flop(input));
    return __result;
END_RCPP
}
// magick_image_fill
XPtrImage magick_image_fill(XPtrImage input, Rcpp::String color, Rcpp::String point, double fuzz);
RcppExport SEXP magick_magick_image_fill(SEXP inputSEXP, SEXP colorSEXP, SEXP pointSEXP, SEXP fuzzSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type color(colorSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type point(pointSEXP);
    Rcpp::traits::input_parameter< double >::type fuzz(fuzzSEXP);
    __result = Rcpp::wrap(magick_image_fill(input, color, point, fuzz));
    return __result;
END_RCPP
}
// magick_image_frame
XPtrImage magick_image_frame(XPtrImage input, Rcpp::String geometry);
RcppExport SEXP magick_magick_image_frame(SEXP inputSEXP, SEXP geometrySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type geometry(geometrySEXP);
    __result = Rcpp::wrap(magick_image_frame(input, geometry));
    return __result;
END_RCPP
}
// magick_image_negate
XPtrImage magick_image_negate(XPtrImage input);
RcppExport SEXP magick_magick_image_negate(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    __result = Rcpp::wrap(magick_image_negate(input));
    return __result;
END_RCPP
}
// magick_image_normalize
XPtrImage magick_image_normalize(XPtrImage input);
RcppExport SEXP magick_magick_image_normalize(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    __result = Rcpp::wrap(magick_image_normalize(input));
    return __result;
END_RCPP
}
// magick_image_oilpaint
XPtrImage magick_image_oilpaint(XPtrImage input, size_t radius);
RcppExport SEXP magick_magick_image_oilpaint(SEXP inputSEXP, SEXP radiusSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< size_t >::type radius(radiusSEXP);
    __result = Rcpp::wrap(magick_image_oilpaint(input, radius));
    return __result;
END_RCPP
}
// magick_image_rotate
XPtrImage magick_image_rotate(XPtrImage input, double degrees);
RcppExport SEXP magick_magick_image_rotate(SEXP inputSEXP, SEXP degreesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< double >::type degrees(degreesSEXP);
    __result = Rcpp::wrap(magick_image_rotate(input, degrees));
    return __result;
END_RCPP
}
// magick_image_implode
XPtrImage magick_image_implode(XPtrImage input, double factor);
RcppExport SEXP magick_magick_image_implode(SEXP inputSEXP, SEXP factorSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< double >::type factor(factorSEXP);
    __result = Rcpp::wrap(magick_image_implode(input, factor));
    return __result;
END_RCPP
}
// magick_image_format
XPtrImage magick_image_format(XPtrImage input, Rcpp::String format);
RcppExport SEXP magick_magick_image_format(SEXP inputSEXP, SEXP formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type format(formatSEXP);
    __result = Rcpp::wrap(magick_image_format(input, format));
    return __result;
END_RCPP
}
// magick_image_trim
XPtrImage magick_image_trim(XPtrImage input);
RcppExport SEXP magick_magick_image_trim(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    __result = Rcpp::wrap(magick_image_trim(input));
    return __result;
END_RCPP
}
// magick_image_composite
XPtrImage magick_image_composite(XPtrImage input, XPtrImage composite_image, Rcpp::String offset, int op);
RcppExport SEXP magick_magick_image_composite(SEXP inputSEXP, SEXP composite_imageSEXP, SEXP offsetSEXP, SEXP opSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrImage >::type composite_image(composite_imageSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< int >::type op(opSEXP);
    __result = Rcpp::wrap(magick_image_composite(input, composite_image, offset, op));
    return __result;
END_RCPP
}
// magick_image_contrast
XPtrImage magick_image_contrast(XPtrImage input, size_t sharpen);
RcppExport SEXP magick_magick_image_contrast(SEXP inputSEXP, SEXP sharpenSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< size_t >::type sharpen(sharpenSEXP);
    __result = Rcpp::wrap(magick_image_contrast(input, sharpen));
    return __result;
END_RCPP
}
// magick_image_background
XPtrImage magick_image_background(XPtrImage input, Rcpp::String color);
RcppExport SEXP magick_magick_image_background(SEXP inputSEXP, SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type color(colorSEXP);
    __result = Rcpp::wrap(magick_image_background(input, color));
    return __result;
END_RCPP
}
// magick_image_crop
XPtrImage magick_image_crop(XPtrImage input, Rcpp::String geometry);
RcppExport SEXP magick_magick_image_crop(SEXP inputSEXP, SEXP geometrySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type geometry(geometrySEXP);
    __result = Rcpp::wrap(magick_image_crop(input, geometry));
    return __result;
END_RCPP
}
// magick_image_scale
XPtrImage magick_image_scale(XPtrImage input, Rcpp::String geometry);
RcppExport SEXP magick_magick_image_scale(SEXP inputSEXP, SEXP geometrySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type geometry(geometrySEXP);
    __result = Rcpp::wrap(magick_image_scale(input, geometry));
    return __result;
END_RCPP
}
// magick_image_sample
XPtrImage magick_image_sample(XPtrImage input, Rcpp::String geometry);
RcppExport SEXP magick_magick_image_sample(SEXP inputSEXP, SEXP geometrySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type geometry(geometrySEXP);
    __result = Rcpp::wrap(magick_image_sample(input, geometry));
    return __result;
END_RCPP
}
// magick_image_border
XPtrImage magick_image_border(XPtrImage input, Rcpp::String color, Rcpp::String geometry);
RcppExport SEXP magick_magick_image_border(SEXP inputSEXP, SEXP colorSEXP, SEXP geometrySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type color(colorSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type geometry(geometrySEXP);
    __result = Rcpp::wrap(magick_image_border(input, color, geometry));
    return __result;
END_RCPP
}
// magick_image_read
XPtrImage magick_image_read(Rcpp::RawVector x);
RcppExport SEXP magick_magick_image_read(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type x(xSEXP);
    __result = Rcpp::wrap(magick_image_read(x));
    return __result;
END_RCPP
}
// magick_image_read_list
XPtrImage magick_image_read_list(Rcpp::List list);
RcppExport SEXP magick_magick_image_read_list(SEXP listSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::List >::type list(listSEXP);
    __result = Rcpp::wrap(magick_image_read_list(list));
    return __result;
END_RCPP
}
// magick_image_write
Rcpp::RawVector magick_image_write(XPtrImage image);
RcppExport SEXP magick_magick_image_write(SEXP imageSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrImage >::type image(imageSEXP);
    __result = Rcpp::wrap(magick_image_write(image));
    return __result;
END_RCPP
}
// magick_image_append
XPtrImage magick_image_append(XPtrImage image, bool stack);
RcppExport SEXP magick_magick_image_append(SEXP imageSEXP, SEXP stackSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrImage >::type image(imageSEXP);
    Rcpp::traits::input_parameter< bool >::type stack(stackSEXP);
    __result = Rcpp::wrap(magick_image_append(image, stack));
    return __result;
END_RCPP
}
// magick_image_average
XPtrImage magick_image_average(XPtrImage image);
RcppExport SEXP magick_magick_image_average(SEXP imageSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrImage >::type image(imageSEXP);
    __result = Rcpp::wrap(magick_image_average(image));
    return __result;
END_RCPP
}
// magick_image_coalesce
XPtrImage magick_image_coalesce(XPtrImage image);
RcppExport SEXP magick_magick_image_coalesce(SEXP imageSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrImage >::type image(imageSEXP);
    __result = Rcpp::wrap(magick_image_coalesce(image));
    return __result;
END_RCPP
}
// magick_image_flatten
XPtrImage magick_image_flatten(XPtrImage image);
RcppExport SEXP magick_magick_image_flatten(SEXP imageSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrImage >::type image(imageSEXP);
    __result = Rcpp::wrap(magick_image_flatten(image));
    return __result;
END_RCPP
}
// magick_image_fft
XPtrImage magick_image_fft(XPtrImage image);
RcppExport SEXP magick_magick_image_fft(SEXP imageSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrImage >::type image(imageSEXP);
    __result = Rcpp::wrap(magick_image_fft(image));
    return __result;
END_RCPP
}
// magick_image_map
XPtrImage magick_image_map(XPtrImage input, XPtrImage map_image, bool dither);
RcppExport SEXP magick_magick_image_map(SEXP inputSEXP, SEXP map_imageSEXP, SEXP ditherSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrImage >::type input(inputSEXP);
    Rcpp::traits::input_parameter< XPtrImage >::type map_image(map_imageSEXP);
    Rcpp::traits::input_parameter< bool >::type dither(ditherSEXP);
    __result = Rcpp::wrap(magick_image_map(input, map_image, dither));
    return __result;
END_RCPP
}
// magick_image_montage
XPtrImage magick_image_montage(XPtrImage image);
RcppExport SEXP magick_magick_image_montage(SEXP imageSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrImage >::type image(imageSEXP);
    __result = Rcpp::wrap(magick_image_montage(image));
    return __result;
END_RCPP
}
// magick_image_morph
XPtrImage magick_image_morph(XPtrImage image, int frames);
RcppExport SEXP magick_magick_image_morph(SEXP imageSEXP, SEXP framesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrImage >::type image(imageSEXP);
    Rcpp::traits::input_parameter< int >::type frames(framesSEXP);
    __result = Rcpp::wrap(magick_image_morph(image, frames));
    return __result;
END_RCPP
}
// magick_image_mosaic
XPtrImage magick_image_mosaic(XPtrImage image);
RcppExport SEXP magick_magick_image_mosaic(SEXP imageSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtrImage >::type image(imageSEXP);
    __result = Rcpp::wrap(magick_image_mosaic(image));
    return __result;
END_RCPP
}
