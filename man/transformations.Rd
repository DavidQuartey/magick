% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/transformations.R
\name{transformations}
\alias{image_annotate}
\alias{image_background}
\alias{image_blur}
\alias{image_border}
\alias{image_charcoal}
\alias{image_chop}
\alias{image_colorize}
\alias{image_composite}
\alias{image_contrast}
\alias{image_crop}
\alias{image_edge}
\alias{image_emboss}
\alias{image_enhance}
\alias{image_equalize}
\alias{image_fill}
\alias{image_flip}
\alias{image_flop}
\alias{image_format}
\alias{image_frame}
\alias{image_implode}
\alias{image_negate}
\alias{image_noise}
\alias{image_normalize}
\alias{image_oilpaint}
\alias{image_rotate}
\alias{image_sample}
\alias{image_scale}
\alias{image_trim}
\alias{transformations}
\title{Image Transformations}
\usage{
image_format(image, format)

image_trim(image)

image_background(image, color)

image_crop(image, geometry = "")

image_scale(image, geometry = "")

image_sample(image, geometry = "")

image_border(image, color = "", geometry = "")

image_noise(image, noisetype = "gaussian")

image_blur(image, radius = 1, sigma = 0.5)

image_charcoal(image, radius = 1, sigma = 0.5)

image_edge(image, radius = 1)

image_oilpaint(image, radius = 1)

image_emboss(image, radius = 1, sigma = 0.5)

image_enhance(image)

image_equalize(image)

image_flip(image)

image_flop(image)

image_frame(image, geometry = "25x25+6+6")

image_implode(image, factor = 0.5)

image_negate(image)

image_normalize(image)

image_rotate(image, degrees)

image_fill(image, color, point = "1x1", fuzz = 0)

image_chop(image, geometry)

image_colorize(image, opacity, color)

image_composite(image, composite_image = image[1], operator = "atop",
  offset = "0x0")

image_contrast(image, sharpen = 1)

image_annotate(image, text, gravity = "northwest", location = "+0+0",
  degrees = 0)
}
\arguments{
\item{image}{object returned by \code{image_read}}

\item{format}{output format such as \code{png}, \code{jpeg}, \code{gif} or \code{pdf}.}

\item{color}{a valid \href{https://www.imagemagick.org/Magick++/Color.html}{color string}}

\item{geometry}{a string with \href{https://www.imagemagick.org/Magick++/Geometry.html}{geometry syntax}
for example \code{"10x10+5-5"}.}

\item{noisetype}{integer betwee 0 and 5 with
\href{https://www.imagemagick.org/Magick++/Enumerations.html#NoiseType}{noisetype}.}

\item{radius}{the radius of the Gaussian, in pixels, not counting the center pixel.}

\item{sigma}{the standard deviation of the Laplacian, in pixels.}

\item{factor}{image implode factor (special effect)}

\item{degrees}{how many degrees}

\item{point}{string indicating the flood-fill starting point}

\item{fuzz}{Colors within this distance are considered equal.
Use this option to match colors that are close to the target color in RGB space.
I think max distance (from #000000 to #FFFFFF) is 256^3.}

\item{opacity}{percentage of transparency}

\item{composite_image}{composition image}

\item{operator}{string with a
\href{https://www.imagemagick.org/Magick++/Enumerations.html#CompositeOperator}{composite operator}.}

\item{offset}{geometry string with offset}

\item{sharpen}{enhance intensity differences in image}

\item{text}{annotation text}

\item{gravity}{string with
\href{https://www.imagemagick.org/Magick++/Enumerations.html#GravityType}{gravity type}}

\item{location}{geometry string with location relative to \code{gravity}}
}
\description{
Vectorized functions for transforming images. These functions apply
the same transformation to each frame in the image.
The \href{https://www.imagemagick.org/Magick++/STL.html}{Magick++ documentation}
explains meaning of each function and parameter. See \link{editing} for
functions to read or combine image sequences.
}
\details{
Each function returns a copy of the manipulated image; the input image will
be unaffected. Therefore operations can be piped with magrittr if you're
into that kind of stuff.

Besides these functions also R-base functions such as \code{c()}, \code{[},
\code{as.list()}, \code{rev}, \code{length}, and \code{print} can be used
to work with image frames.
}
\examples{
logo <- image_read(system.file("Rlogo.png", package = "magick"))
logo <- image_scale(logo, "400")
image_trim(logo)
image_crop(logo, "400x400+200+200")
image_scale(logo, "200x200")
image_sample(logo, "200x200")
image_border(logo, "red", "10x10")
image_noise(logo)
image_blur(logo, 10, 10)
image_charcoal(logo)
image_edge(logo)
image_oilpaint(logo)
image_emboss(logo)
image_enhance(logo)
image_equalize(logo)
image_flip(logo)
image_flop(logo)
image_frame(logo)
image_implode(logo)
image_negate(logo)
image_normalize(logo)
image_rotate(logo, 45)
image_fill(logo, "red")
image_fill(logo, "red", fuzz = 256^2)
# chops off 100 pixels from left and 20 from top
image_chop(logo, "100x20")
image_colorize(logo, 50, "red")
oldlogo <- image_read(system.file("Rlogo-old.png", package = "magick"))
image_composite(logo, oldlogo)
image_composite(logo, oldlogo, operator = "copyred")
test <- image_scale(oldlogo, "400x400")
out <- list()
for(i in 1:10){
  out[[i]] <- test
  test <- image_contrast(test)
}
animation <- do.call(c, out)
image_format(animation, "gif")
image_annotate(logo, "This is a test")
}
\seealso{
Other image: \code{\link{editing}}
}

